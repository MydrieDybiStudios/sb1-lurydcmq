import React, { useEffect, useState } from "react";
import { supabase } from "../lib/supabaseClient";
import { useNavigate } from "react-router-dom";

// ---------- –¢–∏–ø—ã ----------
interface ProfileData {
  first_name: string;
  last_name: string;
  class_num: number;
  class_range: "1-8" | "8-11";
  avatar_url: string | null;
}

interface Achievement {
  id: number;
  title: string;
  description: string;
  icon: string;
  earned_at: string;
}

interface ProgressItem {
  course_id: string;
  course_name: string;
  score: number;
  total: number;
  percentage: number;
  updated_at: string;
}

// ---------- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ----------
const achievementsList = [
  { id: 1, title: "–ù–æ–≤–∏—á–æ–∫", description: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞", icon: "‚≠ê" },
  { id: 2, title: "–ì–µ–æ–ª–æ–≥-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å", description: "–ò–∑—É—á–µ–Ω—ã –æ—Å–Ω–æ–≤—ã –≥–µ–æ–ª–æ–≥–∏–∏", icon: "‚õ∞Ô∏è" },
  { id: 3, title: "–ò–Ω–∂–µ–Ω–µ—Ä –¥–æ–±—ã—á–∏", description: "–ü—Ä–æ–π–¥–µ–Ω –∫—É—Ä—Å –ø–æ –º–µ—Ç–æ–¥–∞–º –¥–æ–±—ã—á–∏", icon: "‚õèÔ∏è" },
  { id: 4, title: "–ú–∞—Å—Ç–µ—Ä –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–æ–π –æ—Ç—Ä–∞—Å–ª–∏", description: "100% –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤", icon: "üëë" },
  { id: 5, title: "–õ–µ–≥–µ–Ω–¥–∞ –Ω–µ—Ñ—Ç–µ–≥–∞–∑–∞", description: "90%+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–∞—Ö", icon: "ü•á" },
  { id: 6, title: "–ü—Ä–æ—Ö–æ–¥–µ—Ü –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–π", description: "–ù–∞–±—Ä–∞–Ω–æ 100 –æ—á–∫–æ–≤", icon: "üöÄ" },
  { id: 7, title: "–ù–µ—Ñ—Ç—è–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç", description: "–ù–∞–±—Ä–∞–Ω–æ 300 –æ—á–∫–æ–≤", icon: "üíº" },
  { id: 8, title: "–ì–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä", description: "–ù–∞–±—Ä–∞–Ω–æ 500 –æ—á–∫–æ–≤", icon: "üèóÔ∏è" },
];

// ---------- –†–∞–Ω–≥–∏ ----------
const getRank = (points: number) => {
  if (points >= 500) return "üèÜ –õ–µ–≥–µ–Ω–¥–∞ –Ω–µ—Ñ—Ç–∏";
  if (points >= 300) return "üíº –≠–∫—Å–ø–µ—Ä—Ç –æ—Ç—Ä–∞—Å–ª–∏";
  if (points >= 200) return "üõ¢Ô∏è –ò–Ω–∂–µ–Ω–µ—Ä";
  if (points >= 100) return "üî© –ü—Ä–æ—Ö–æ–¥–µ—Ü –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–π";
  return "üë∑ –£—á–µ–Ω–∏–∫ –Ω–µ—Ñ—Ç—è–Ω–∏–∫";
};

// ---------- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ----------
const Profile: React.FC = () => {
  const [profile, setProfile] = useState<ProfileData | null>(null);
  const [achievements, setAchievements] = useState<Achievement[]>([]);
  const [progress, setProgress] = useState<ProgressItem[]>([]);
  const [totalPoints, setTotalPoints] = useState(0);
  const [loading, setLoading] = useState(true);
  const [toast, setToast] = useState<{ msg: string; type: "success" | "error" } | null>(null);

  const navigate = useNavigate();

  // ---------- –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ----------
  useEffect(() => {
    const fetchAll = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        navigate("/");
        return;
      }

      // 1Ô∏è‚É£ –ü—Ä–æ—Ñ–∏–ª—å
      const { data: prof } = await supabase.from("profiles").select("*").eq("id", user.id).single();
      setProfile(prof);

      // 2Ô∏è‚É£ –ü—Ä–æ–≥—Ä–µ—Å—Å (join —Å –∫—É—Ä—Å–∞–º–∏)
      const { data: progressData } = await supabase
        .from("progress")
        .select("*, courses(name)")
        .eq("user_id", user.id)
        .order("updated_at", { ascending: false });

      if (progressData) {
        const mapped = progressData.map((p: any) => ({
          course_id: p.course_id,
          course_name: p.courses?.name || `–ö—É—Ä—Å ${p.course_id}`,
          score: p.score,
          total: p.total,
          percentage: p.percentage,
          updated_at: p.updated_at,
        }));
        setProgress(mapped);
        const total = mapped.reduce((sum: number, x: ProgressItem) => sum + x.score, 0);
        setTotalPoints(total);
      }

      // 3Ô∏è‚É£ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const { data: userAchievements } = await supabase
        .from("user_achievements")
        .select("*, achievements(title, description, icon)")
        .eq("user_id", user.id);

      if (userAchievements) {
        setAchievements(
          userAchievements.map((a: any) => ({
            id: a.achievement_id,
            title: a.achievements.title,
            description: a.achievements.description,
            icon: a.achievements.icon,
            earned_at: a.earned_at,
          }))
        );
      }

      setLoading(false);
    };
    fetchAll();
  }, [navigate]);

  // ---------- –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ----------
  useEffect(() => {
    if (!profile || !totalPoints) return;
    const checkAchievements = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      const existing = achievements.map((a) => a.title);

      for (const ach of achievementsList) {
        let shouldGrant = false;

        if (ach.id === 1 && progress.length > 0) shouldGrant = true;
        if (ach.id === 2 && progress.some(p => p.course_name.toLowerCase().includes("–≥–µ–æ–ª–æ–≥–∏—è"))) shouldGrant = true;
        if (ach.id === 3 && progress.some(p => p.course_name.toLowerCase().includes("–¥–æ–±—ã—á"))) shouldGrant = true;
        if (ach.id === 4 && progress.every(p => p.percentage === 100)) shouldGrant = true;
        if (ach.id === 5 && progress.every(p => p.percentage >= 90)) shouldGrant = true;
        if (ach.id === 6 && totalPoints >= 100) shouldGrant = true;
        if (ach.id === 7 && totalPoints >= 300) shouldGrant = true;
        if (ach.id === 8 && totalPoints >= 500) shouldGrant = true;

        if (shouldGrant && !existing.includes(ach.title)) {
          await supabase.from("user_achievements").insert({
            user_id: user.id,
            achievement_id: ach.id,
            earned_at: new Date().toISOString(),
          });
          setToast({ msg: `üéâ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${ach.title}!`, type: "success" });
        }
      }
    };

    checkAchievements();
  }, [totalPoints, achievements, progress]);

  if (loading) return <div className="text-center p-8">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (!profile) return null;

  const rank = getRank(totalPoints);

  return (
    <div className="max-w-3xl mx-auto mt-10 p-8 bg-white rounded-3xl shadow-2xl border border-gray-200 relative">
      {toast && (
        <div
          className={`fixed top-5 right-5 px-4 py-2 rounded-lg shadow-lg text-white ${
            toast.type === "success" ? "bg-green-500" : "bg-red-500"
          }`}
        >
          {toast.msg}
        </div>
      )}

      <div className="flex flex-col items-center gap-4">
        <h1 className="text-2xl font-bold">{profile.first_name} {profile.last_name}</h1>
        <p className="text-lg text-gray-700">{rank}</p>

        <div className="mt-2 text-gray-600">
          üéØ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: <span className="font-bold text-yellow-600">{totalPoints}</span>
        </div>

        {/* ---------- –ü—Ä–æ–≥—Ä–µ—Å—Å ---------- */}
        <div className="w-full mt-6 bg-gray-50 rounded-2xl p-4 border border-yellow-200">
          <h2 className="text-xl font-semibold mb-3">üìò –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å–∞–º</h2>
          {progress.length === 0 ? (
            <p className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>
          ) : (
            <div className="space-y-2">
              {progress.map((p) => (
                <div key={p.course_id} className="flex justify-between bg-white p-3 rounded-lg shadow-sm">
                  <div>
                    <p className="font-semibold">{p.course_name}</p>
                    <p className="text-sm text-gray-500">–ë–∞–ª–ª—ã: {p.score}/{p.total}</p>
                  </div>
                  <p className="text-yellow-600 font-bold">{p.percentage}%</p>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* ---------- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ---------- */}
        <div className="w-full mt-6 bg-gray-50 rounded-2xl p-4 border border-yellow-200">
          <h2 className="text-xl font-semibold mb-3">üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
          {achievements.length === 0 ? (
            <p className="text-gray-500">–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π üòÖ</p>
          ) : (
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
              {achievements.map((a) => (
                <div
                  key={a.id}
                  className="flex flex-col items-center bg-white p-3 rounded-xl shadow hover:shadow-md transition"
                >
                  <span className="text-3xl">{a.icon}</span>
                  <p className="text-sm font-bold mt-1">{a.title}</p>
                  <p className="text-xs text-gray-500 text-center">{a.description}</p>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Profile;
