import React, { useEffect, useState } from 'react';
import { CheckCircle, Award } from 'lucide-react';
import { supabase } from '../lib/supabaseClient';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';

interface ResultsComponentProps {
  results: { score: number; total: number; percentage: number; course_id: number } | null;
  courseName: string;
  onClose: () => void;
}

const ResultsComponent: React.FC<ResultsComponentProps> = ({
  results,
  courseName,
  onClose
}) => {
  const [userName, setUserName] = useState<string>(''); // üë§ —Å—é–¥–∞ –∑–∞–≥—Ä—É–∑–∏–º –∏–º—è

  useEffect(() => {
    const loadUserProfile = async () => {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) return;

      const { data: profileData } = await supabase
        .from('profiles')
        .select('first_name, last_name')
        .eq('id', user.id)
        .single();

      if (profileData) {
        const fullName = `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim();
        setUserName(fullName || '–£—á–∞—Å—Ç–Ω–∏–∫');
      }
    };

    loadUserProfile();
  }, []);

  if (!results) return null;

  const { score, total, percentage } = results;

  const isPassed = percentage >= 50;

  const handleDownloadCertificate = async () => {
    const name = userName || '–£—á–∞—Å—Ç–Ω–∏–∫';

    try {
      const pdfDoc = await PDFDocument.create();
      const page = pdfDoc.addPage([600, 400]);
      const font = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
      const { width, height } = page.getSize();

      // –†–∞–º–∫–∞
      page.drawRectangle({
        x: 10,
        y: 10,
        width: width - 20,
        height: height - 20,
        borderColor: rgb(0.9, 0.7, 0.1),
        borderWidth: 4,
      });

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫
      page.drawText('–°–ï–†–¢–ò–§–ò–ö–ê–¢ –î–û–°–¢–ò–ñ–ï–ù–ò–ô', {
        x: 120,
        y: height - 80,
        size: 22,
        font,
        color: rgb(0.9, 0.7, 0.1),
      });

      page.drawText(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${name}!`, {
        x: 100,
        y: height - 140,
        size: 16,
        font,
        color: rgb(0, 0, 0),
      });

      page.drawText(`–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å:`, {
        x: 100,
        y: height - 170,
        size: 14,
        font,
        color: rgb(0, 0, 0),
      });

      page.drawText(`"${courseName}"`, {
        x: 120,
        y: height - 200,
        size: 14,
        font,
        color: rgb(0.1, 0.1, 0.1),
      });

      const date = new Date().toLocaleDateString('ru-RU');
      page.drawText(`–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: ${date}`, {
        x: 100,
        y: height - 250,
        size: 12,
        font,
        color: rgb(0.3, 0.3, 0.3),
      });

      page.drawText(`–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ "–Æ–≥—Ä–∞.–ù–µ—Ñ—Ç—å"`, {
        x: 100,
        y: 40,
        size: 10,
        font,
        color: rgb(0.4, 0.4, 0.4),
      });

      const pdfBytes = await pdfDoc.save();
      const blob = new Blob([pdfBytes], { type: 'application/pdf' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç_${name}_${courseName}.pdf`;
      link.click();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error);
    }
  };

  return (
    <div className="p-6 text-center">
      <div className="flex justify-center mb-6">
        <div className={`${isPassed ? 'bg-green-100' : 'bg-red-100'} rounded-full w-20 h-20 flex items-center justify-center`}>
          {isPassed ? (
            <CheckCircle className={`${percentage >= 90 ? 'text-green-600' : 'text-yellow-600'} w-10 h-10`} />
          ) : (
            <div className="text-red-600 text-3xl">!</div>
          )}
        </div>
      </div>

      <h3 className="text-2xl font-bold mb-2">
        {percentage >= 90 ? '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' :
         percentage >= 70 ? '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' :
         percentage >= 50 ? '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!' :
         '–°—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª'}
      </h3>

      <p className="text-lg text-gray-700 mb-4">
        {userName}, –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {total} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫—É—Ä—Å—É ¬´{courseName}¬ª
      </p>

      {percentage >= 70 && (
        <div className="mb-8">
          <p className="text-gray-700 mb-4">
            –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.
          </p>
          <button
            className="bg-yellow-500 hover:bg-yellow-600 text-black font-medium py-2 px-6 rounded-lg transition flex items-center mx-auto"
            onClick={handleDownloadCertificate}
          >
            <Award className="mr-2 w-5 h-5" />
            –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
          </button>
        </div>
      )}

      <div className="mt-4 border-t border-gray-200 pt-4">
        <p className="text-gray-600 mb-4">
          {isPassed
            ? '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.'
            : '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∫—É—Ä—Å–∞ –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑.'}
        </p>
        <button
          className="bg-gray-800 hover:bg-black text-white font-medium py-2 px-6 rounded-lg transition"
          onClick={onClose}
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º
        </button>
      </div>
    </div>
  );
};

export default ResultsComponent;
