// src/components/ResultsComponent.tsx
import React, { useEffect, useState } from "react";
import { Award, CheckCircle } from "lucide-react";
import { PDFDocument } from "pdf-lib";
import { supabase } from "../lib/supabaseClient";
import { useNavigate } from "react-router-dom";

interface ResultsComponentProps {
  results: { score: number; total: number; percentage: number } | null;
  courseName: string;
  onClose: () => void; // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫—É—Ä—Å–∞–º
}

const ResultsComponent: React.FC<ResultsComponentProps> = ({
  results,
  courseName,
  onClose,
}) => {
  const navigate = useNavigate();

  const [userName, setUserName] = useState<string>("–£—á–∞—Å—Ç–Ω–∏–∫");
  const [isGenerating, setIsGenerating] = useState(false);
  const [isCertificateAvailable, setIsCertificateAvailable] = useState(false);
  const [isCourseCompleted, setIsCourseCompleted] = useState(false);
  const [isCleared, setIsCleared] = useState(false); // üëà –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±—Ä–æ—Å–∞

  useEffect(() => {
    const loadProfileName = async () => {
      try {
        const {
          data: { user },
        } = await supabase.auth.getUser();
        if (!user) return;

        const { data: profile } = await supabase
          .from("profiles")
          .select("first_name, last_name")
          .eq("id", user.id)
          .maybeSingle();

        if (profile) {
          const fullName = [profile.first_name, profile.last_name]
            .filter(Boolean)
            .join(" ");
          setUserName(fullName || "–£—á–∞—Å—Ç–Ω–∏–∫");
        }
      } catch {
        setUserName("–£—á–∞—Å—Ç–Ω–∏–∫");
      }
    };
    loadProfileName();
  }, []);

  if (!results || isCleared) return null; // üëà –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ –∫—É—Ä—Å —Å–±—Ä–æ—à–µ–Ω

  const { score, total, percentage } = results;
  const incorrect = total - score;
  const isPassed = percentage >= 50;

  const resultTitle = isPassed ? "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!" : "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!";
  const resultClass = isPassed ? "bg-yellow-500" : "bg-red-500";

  useEffect(() => {
    if (percentage >= 70) {
      setIsCertificateAvailable(true);
      setIsCourseCompleted(true);
    }
  }, [percentage]);

  const safeFileName = (s: string) =>
    s
      ? s
          .replace(/[^a-zA-Z0-9\u0400-\u04FF\s\-_,.()]/g, "")
          .replace(/\s+/g, "_")
      : "unknown";

  const handleDownloadCertificate = async () => {
    if (!isCertificateAvailable) {
      alert("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –ø—Ä–æ–π–¥–∏—Ç–µ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ.");
      return;
    }

    setIsGenerating(true);
    try {
      const canvasWidth = 2480;
      const canvasHeight = 1754;
      const padding = 120;

      const canvas = document.createElement("canvas");
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      const ctx = canvas.getContext("2d");
      if (!ctx) throw new Error("Canvas –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");

      const gradient = ctx.createLinearGradient(0, 0, canvasWidth, canvasHeight);
      gradient.addColorStop(0, "#fffef5");
      gradient.addColorStop(1, "#fff9e5");
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvasWidth, canvasHeight);

      ctx.strokeStyle = "#D4AF37";
      ctx.lineWidth = 40;
      roundRect(
        ctx,
        padding / 2,
        padding / 2,
        canvasWidth - padding,
        canvasHeight - padding,
        50,
        false,
        true
      );

      ctx.fillStyle = "#D4AF37";
      ctx.font = "bold 110px Arial";
      ctx.textAlign = "center";
      ctx.fillText("–°–ï–†–¢–ò–§–ò–ö–ê–¢", canvasWidth / 2, padding + 200);

      ctx.fillStyle = "#000";
      ctx.font = "600 60px Arial";
      ctx.fillText("–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫—É—Ä—Å–∞", canvasWidth / 2, padding + 280);

      ctx.fillStyle = "#000";
      ctx.font = "bold 90px Arial";
      ctx.fillText(userName, canvasWidth / 2, padding + 460);

      ctx.font = "400 50px Arial";
      ctx.fillText(
        `—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª(–∞) –∫—É—Ä—Å ¬´${courseName}¬ª`,
        canvasWidth / 2,
        padding + 550
      );

      ctx.fillStyle = "#D4AF37";
      ctx.font = "bold 60px Arial";
      ctx.fillText("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê", canvasWidth / 2, padding + 720);

      ctx.fillStyle = "#000";
      ctx.font = "400 48px Arial";
      ctx.fillText(
        `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${score} –∏–∑ ${total}`,
        canvasWidth / 2,
        padding + 800
      );
      ctx.fillText(`–û—à–∏–±–æ–∫: ${incorrect}`, canvasWidth / 2, padding + 860);
      ctx.fillText(`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${percentage}%`, canvasWidth / 2, padding + 920);

      const dateStr = new Date().toLocaleDateString("ru-RU");
      ctx.font = "400 36px Arial";
      ctx.textAlign = "left";
      ctx.fillStyle = "#000";
      ctx.fillText(
        `–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: ${dateStr}`,
        padding + 40,
        canvasHeight - padding - 160
      );

      ctx.textAlign = "center";
      ctx.fillStyle = "#444";
      ctx.font = "italic 36px Arial";
      ctx.fillText(
        "–¶–∏—Ñ—Ä–æ–≤–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ ¬´–Æ–≥—Ä–∞.–ù–µ—Ñ—Ç—å¬ª",
        canvasWidth / 2,
        canvasHeight - padding + 10
      );

      const pngBlob: Blob | null = await new Promise((res) =>
        canvas.toBlob((b) => res(b), "image/png", 1)
      );
      if (!pngBlob)
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");

      const pdfDoc = await PDFDocument.create();
      const pngBytes = await pngBlob.arrayBuffer();
      const pngImage = await pdfDoc.embedPng(pngBytes);
      const page = pdfDoc.addPage([pngImage.width, pngImage.height]);
      page.drawImage(pngImage, {
        x: 0,
        y: 0,
        width: pngImage.width,
        height: pngImage.height,
      });

      const pdfBytes = await pdfDoc.save();
      const blob = new Blob([pdfBytes], { type: "application/pdf" });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;
      a.download = `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç_${safeFileName(
        userName
      )}_${safeFileName(courseName)}.pdf`;
      document.body.appendChild(a);
      a.click();
      a.remove();

      setTimeout(() => URL.revokeObjectURL(url), 60000);
    } catch (err: any) {
      console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:", err);
      alert(`–û—à–∏–±–∫–∞: ${err.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  // === –°–±—Ä–æ—Å –∫—É—Ä—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç ===
  const handleReturnToCourses = () => {
    // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—ë –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setIsCertificateAvailable(false);
    setIsCourseCompleted(false);
    setIsCleared(true);

    localStorage.removeItem("currentCourseResults");
    localStorage.removeItem("certificateGenerated");

    // –≤—ã–∑—ã–≤–∞–µ–º onClose (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä—ã—Ç—å ResultsComponent)
    if (onClose) onClose();

    // –Ω–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    navigate("/cabinet", { replace: true });
  };

  return (
    <div className="p-6 text-center">
      <div className="flex justify-center mb-6">
        <div
          className={`${
            isPassed ? "bg-yellow-100" : "bg-red-100"
          } rounded-full w-20 h-20 flex items-center justify-center`}
        >
          {isPassed ? (
            <CheckCircle
              className={`${
                percentage >= 90 ? "text-yellow-600" : "text-yellow-500"
              } w-10 h-10`}
            />
          ) : (
            <div className="text-red-600 text-3xl">!</div>
          )}
        </div>
      </div>

      <h3 className="text-2xl font-bold mb-2">{resultTitle}</h3>
      <p className="text-lg text-gray-700 mb-4">
        {userName}, –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {total} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫—É—Ä—Å—É
        ¬´{courseName}¬ª.
      </p>

      <div className="mb-8">
        <div className="w-full bg-gray-200 rounded-full h-4 mb-2">
          <div
            className={`${resultClass} h-4 rounded-full`}
            style={{ width: `${percentage}%` }}
          ></div>
        </div>
        <p className="text-sm text-gray-600">{percentage}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</p>
      </div>

      {isCertificateAvailable && isCourseCompleted && (
        <div className="mb-8">
          <p className="text-gray-700 mb-4">
            –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {userName}! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.
          </p>
          <button
            onClick={handleDownloadCertificate}
            disabled={isGenerating}
            className="bg-yellow-500 hover:bg-yellow-600 disabled:opacity-60 text-black font-medium py-2 px-6 rounded-lg transition flex items-center mx-auto"
          >
            <Award className="mr-2 w-5 h-5" />
            <span>
              {isGenerating ? "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." : "–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"}
            </span>
          </button>
        </div>
      )}

      <div className="mt-4 border-t border-gray-200 pt-4">
        <p className="text-gray-600 mb-4">
          {isPassed
            ? "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ."
            : "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞."}
        </p>
        <button
          className="bg-gray-800 hover:bg-black text-white font-medium py-2 px-6 rounded-lg transition"
          onClick={handleReturnToCourses}
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º
        </button>
      </div>
    </div>
  );
};

export default ResultsComponent;

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
function roundRect(
  ctx: CanvasRenderingContext2D,
  x: number,
  y: number,
  w: number,
  h: number,
  r: number,
  fill = false,
  stroke = true
) {
  ctx.beginPath();
  ctx.moveTo(x + r, y);
  ctx.arcTo(x + w, y, x + w, y + h, r);
  ctx.arcTo(x + w, y + h, x, y + h, r);
  ctx.arcTo(x, y + h, x, y, r);
  ctx.arcTo(x, y, x + w, y, r);
  ctx.closePath();
  if (fill) ctx.fill();
  if (stroke) ctx.stroke();
}
